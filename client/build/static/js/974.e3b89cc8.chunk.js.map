{"version":3,"file":"static/js/974.e3b89cc8.chunk.js","mappings":"4JAGMA,EAAWC,EAAAA,YAAiB,SAACC,EAAOC,GACxC,IAAOC,EAAaD,EAAbC,UACP,GAA2BC,EAAAA,EAAAA,UAAS,IAApC,eAAOC,EAAP,KAAcC,EAAd,KAMA,SAASC,EAAcC,GACrB,IAAIA,EAAQ,OAAOA,EACnB,IAAMC,EAAmBD,EAAOE,QAAQ,SAAU,IAClD,GAAGD,EAAiBE,QAAU,EAAG,OAAOF,EACxC,IAAMG,EAAUH,EAAiBI,MAAMJ,EAAiBE,OAAO,GACzDG,EAAUL,EAAiBI,MAAM,EAAEJ,EAAiBE,OAAO,GAEjE,MAAM,GAAN,OAAUG,EAAV,YAAqBF,GAKvB,OAHAG,EAAAA,EAAAA,YAAU,WAAK,IAAD,EACZ,UAAIZ,EAAUa,eAAd,OAAI,EAAmBC,QAAOd,EAAUa,QAAQC,MAAQ,MACxD,CAACd,KAED,iCACA,SAAC,UAAD,CAAYe,QAAQ,GAAGC,gBAAc,EAArC,qBACA,UAAC,IAAD,YACE,SAAC,SAAD,kBACA,SAAC,YAAD,CAAcC,GAAG,SAASC,KAAK,OAAOC,YAAY,SAASpB,IAAKC,EAAWc,MAAOZ,EAAQkB,SAAU,SAACC,GAAD,OAtBpF,SAACA,GAAkC,IAA/BC,EAA8B,uDAApB,GAAIC,EAAgB,uCACjDF,EAAEG,OAAOV,MAAMN,QAAUc,IAAYD,EAAEG,OAAOV,MAAQO,EAAEG,OAAOV,MAAMW,OAAO,EAAGH,IAClF,IAAMI,EAAkBtB,EAAciB,EAAEG,OAAOV,OAC/CS,EAAYG,GAmBiGC,CAAYN,EAAG,GAAIlB,IAAYyB,UAAQ,KAClJ,SAAC,qBAAD,CAAuBV,KAAK,QAA5B,0BACA,SAAC,qBAAD,CAAuBA,KAAK,UAA5B,6CAMN,a,gICnCMW,EAAuBhC,EAAAA,cAAoB,MACjDgC,EAAQC,YAAc,oBACtB,Q,gECKMC,GAAiBC,EAAAA,EAAAA,GAAmB,mBAAoB,CAC5DC,UAAW,SAuBPC,EAA0BrC,EAAAA,YAAiB,WAQ9CE,GAAQ,IAPToC,EAOS,EAPTA,SACAC,EAMS,EANTA,KACAC,EAKS,EALTA,cACAC,EAIS,EAJTA,UAIS,IAFTC,GAAIN,OAEK,MAFO,MAEP,EADNnC,GACM,YACTqC,GAAWK,EAAAA,EAAAA,IAAmBL,EAAU,eAGxC,IAAMM,GAAeC,EAAAA,EAAAA,UAAQ,iBAAO,KAAK,IACzC,OAAoBC,EAAAA,EAAAA,KAAKC,EAAkBC,SAAU,CACnD/B,MAAO2B,EACPK,UAAuBH,EAAAA,EAAAA,KAAKV,GAAD,QAAC,QAC1BlC,IAAKA,GACFD,GAFsB,IAGzBwC,UAAWS,GAAAA,CAAWT,EAAWH,EAAUC,GAAQ,GAAJ,OAAOD,EAAP,YAAmBC,GAAQC,GAAiB,0BAIjGH,EAAWJ,YAAc,aACzB,MAAekB,OAAOC,OAAOf,EAAY,CACvCgB,KAAMnB,EACNoB,MAtCsB,SAAArD,GAAK,OAAiB6C,EAAAA,EAAAA,KAAKZ,EAAgB,CACjEe,UAAuBH,EAAAA,EAAAA,KAAKS,EAAAA,GAAD,QACzBlC,KAAM,SACHpB,OAoCLuD,SA9CyB,SAAAvD,GAAK,OAAiB6C,EAAAA,EAAAA,KAAKZ,EAAgB,CACpEe,UAAuBH,EAAAA,EAAAA,KAAKS,EAAAA,GAAD,QACzBlC,KAAM,YACHpB","sources":["Components/Products/Forms/BookForm.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, InputGroup } from 'react-bootstrap'\n\nconst BookForm = React.forwardRef((props, ref) => {\n  const {weightRef} = ref\n  const [weight,setWeigth] = useState('');\n  const handleInput = (e, maxLength=12, setFunction) => {\n    if(e.target.value.length >= maxLength ) e.target.value = e.target.value.substr(0, maxLength);\n    const formatedDecimal = formatDecimal(e.target.value)\n    setFunction(formatedDecimal);\n  }\n  function formatDecimal(number) {\n    if(!number) return number;\n    const formatedCurrency = number.replace(/[^\\d]/g, '')\n    if(formatedCurrency.length <= 2) return formatedCurrency;\n    const decimal = formatedCurrency.slice(formatedCurrency.length-2)\n    const integer = formatedCurrency.slice(0,formatedCurrency.length-2)\n\n    return `${integer}.${decimal}`;\n  }\n  useEffect(()=>{\n    if (weightRef.current?.value) weightRef.current.value = '';\n  },[weightRef])\n  return (\n    <>\n    <Form.Label htmlFor='' visuallyHidden>Weight</Form.Label>\n    <InputGroup>\n      <InputGroup.Text>KG</InputGroup.Text>\n      <Form.Control id='weight' type='text' placeholder='Weight' ref={weightRef} value={weight} onChange={(e) => handleInput(e, 11, setWeigth)} required/>\n      <Form.Control.Feedback type='valid'>Looks good!</Form.Control.Feedback>\n      <Form.Control.Feedback type='invalid'>Please insert a Weight</Form.Control.Feedback>\n    </InputGroup>\n  </>\n  )\n})\n\nexport default BookForm","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["BookForm","React","props","ref","weightRef","useState","weight","setWeigth","formatDecimal","number","formatedCurrency","replace","length","decimal","slice","integer","useEffect","current","value","htmlFor","visuallyHidden","id","type","placeholder","onChange","e","maxLength","setFunction","target","substr","formatedDecimal","handleInput","required","context","displayName","InputGroupText","createWithBsPrefix","Component","InputGroup","bsPrefix","size","hasValidation","className","as","useBootstrapPrefix","contextValue","useMemo","_jsx","InputGroupContext","Provider","children","classNames","Object","assign","Text","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}